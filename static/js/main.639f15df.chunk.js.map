{"version":3,"sources":["components/Loading.js","components/MovieForm.js","components/MovieCard.js","services/movieData.js","services/movieAPI.js","components/MovieDetailsCard.js","pages/EditMovie.js","pages/MovieDetails.js","pages/MovieList.js","pages/NewMovie.js","pages/NotFound.js","App.js","index.js"],"names":["Loading","className","Spinner","animation","variant","Component","MovieForm","props","state","movie","handleSubmit","bind","onSubmit","this","field","newValue","setState","title","Form","Group","controlId","Label","Control","type","placeholder","value","onChange","event","updateMovie","target","subtitle","imagePath","storyline","as","genre","rating","step","min","max","Button","onClick","block","renderTitleInput","renderSubtitleInput","renderImagePathInput","renderStorylineInput","renderGenreSelection","renderRatingInput","renderSubmitButton","React","defaultProps","MovieCard","id","Card","data-testid","Img","src","Body","Title","Text","href","movies","bookmarked","localStorage","setItem","JSON","stringify","data","readMovies","parse","getItem","saveMovies","getMovie","movieId","find","mov","parseInt","Promise","resolve","setTimeout","updatedMovie","map","deleteMovie","filter","status","MovieDetailsCard","movieAPI","alt","ButtonGroup","EditMovie","shouldRedirect","requestMovie","match","params","a","requestUpdate","to","MovieDetails","loading","MovieList","request","requestMovies","key","size","NewMovie","redirect","newMovie","movieData","nextId","length","then","NotFound","App","path","component","exact","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.639f15df.chunk.js","sourcesContent":["import React, { Component } from 'react';\nimport { Spinner } from 'react-bootstrap';\n\nclass Loading extends Component {\n  render() {\n    return (\n      <div className=\"loading\">\n        <h2>Loading...</h2>\n        <Spinner animation=\"border\" variant=\"danger\" />\n      </div>\n    );\n  }\n}\n\nexport default Loading;\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport { Form } from 'react-bootstrap';\nimport { Button } from 'react-bootstrap';\n\nclass MovieForm extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = { ...props.movie };\n    this.handleSubmit = this.handleSubmit.bind(this);\n  }\n\n  handleSubmit() {\n    const { onSubmit } = this.props;\n    onSubmit(this.state);\n  }\n\n  updateMovie(field, newValue) {\n    this.setState({ [field]: newValue });\n  }\n\n  renderTitleInput() {\n    const { title } = this.state;\n\n    return (\n      <Form.Group controlId=\"title\">\n        <Form.Label>Title</Form.Label>\n        <Form.Control\n          type=\"text\"\n          placeholder=\"Enter title\"\n          value={title}\n          onChange={(event) => this.updateMovie('title', event.target.value)}\n        />\n      </Form.Group>\n    );\n  }\n\n  renderSubtitleInput() {\n    const { subtitle } = this.state;\n\n    return (\n      <Form.Group controlId=\"subtitle\">\n        <Form.Label>Subtitle</Form.Label>\n        <Form.Control\n          placeholder=\"Enter subtitle\"\n          type=\"text\"\n          value={subtitle}\n          onChange={(event) => this.updateMovie('subtitle', event.target.value)}\n        />\n      </Form.Group>\n    );\n  }\n\n  renderImagePathInput() {\n    const { imagePath } = this.state;\n\n    return (\n      <Form.Group controlId=\"imagePath\">\n        <Form.Label>Image Path</Form.Label>\n        <Form.Control\n          placeholder=\"Enter image path\"\n          type=\"text\"\n          value={imagePath}\n          onChange={(event) => this.updateMovie('imagePath', event.target.value)}\n        />\n      </Form.Group>\n    );\n  }\n\n  renderStorylineInput() {\n    const { storyline } = this.state;\n\n    return (\n      <Form.Group controlId=\"storyLine\">\n        <Form.Label>Story Line</Form.Label>\n        <Form.Control\n          placeholder=\"Enter story line\"\n          as=\"textarea\"\n          value={storyline}\n          onChange={(event) => this.updateMovie('storyline', event.target.value)}\n        />\n      </Form.Group>\n    );\n  }\n\n  renderGenreSelection() {\n    const { genre } = this.state;\n\n    return (\n      <Form.Group controlId=\"genre\">\n      <Form.Label>Genre</Form.Label>\n      <Form.Control\n        as=\"select\"\n        value={genre}\n        onChange={(event) => this.updateMovie('genre', event.target.value)}\n      >\n        <option>Action</option>\n        <option>Comedy</option>\n        <option>Thriller</option>\n        <option>Fantasy</option>\n      </Form.Control>\n    </Form.Group>\n    );\n  }\n\n  renderRatingInput() {\n    const { rating } = this.state;\n\n    return (\n      <Form.Group controlId=\"rate\">\n        <Form.Label>Rate</Form.Label>\n        <Form.Control\n          placeholder=\"Enter rate\"\n          type=\"number\"\n          step={0.1}\n          min={0}\n          max={5}\n          value={rating}\n          onChange={(event) => this.updateMovie('rating', event.target.value)}\n        />\n      </Form.Group>\n    );\n  }\n\n  renderSubmitButton() {\n    return (\n      <Button variant=\"warning\" onClick={this.handleSubmit} block>Submit</Button>\n    );\n  }\n\n  render() {\n    return (\n      <Form className=\"form\">\n        {this.renderTitleInput()}\n        {this.renderSubtitleInput()}\n        {this.renderImagePathInput()}\n        {this.renderStorylineInput()}\n        {this.renderGenreSelection()}\n        {this.renderRatingInput()}\n        {this.renderSubmitButton()}\n      </Form>\n    );\n  }\n}\n\nMovieForm.propTypes = {\n  movie: PropTypes.shape({\n    title: PropTypes.string,\n    subtitle: PropTypes.string,\n    storyline: PropTypes.string,\n    rating: PropTypes.number,\n    imagePath: PropTypes.string,\n    genre: PropTypes.string,\n  }),\n  onSubmit: PropTypes.func.isRequired,\n};\n\nMovieForm.defaultProps = {\n  movie: {\n    title: '',\n    subtitle: '',\n    storyline: '',\n    rating: 0,\n    imagePath: '',\n    genre: '',\n  },\n};\n\nexport default MovieForm;\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport { Card } from 'react-bootstrap';\nimport { Button } from 'react-bootstrap';\n\nclass MovieCard extends React.Component {\n  render() {\n    const { title, storyline, id, imagePath } = this.props.movie;\n    return (\n      <Card data-testid=\"movie-card\">\n        <Card.Img variant=\"top\" src={imagePath} />\n        <Card.Body>\n          <Card.Title>{title}</Card.Title>\n          <Card.Text>{storyline}</Card.Text>\n          <Button href={`/movie-library/${id}`} variant=\"warning\" block>DETAILS</Button>\n        </Card.Body>\n      </Card>\n    );\n  }\n}\n\nMovieCard.propTypes = {\n  movie: PropTypes.shape({\n    title: PropTypes.string.isRequired,\n    storyline: PropTypes.string.isRequired,\n    id: PropTypes.number.isRequired,\n    imagePath: PropTypes.string.isRequired,\n  }).isRequired,\n};\n\nexport default MovieCard;\n","const movies = [\n  {\n    id: 1,\n    title: 'Kingsglaive',\n    subtitle: 'Final Fantasy XV',\n    storyline: \"King Regis, who oversees the land of Lucis, commands his army of soldiers to protect the kingdom from the Niflheim empire's plans to steal the sacred crystal.\",\n    rating: 4.5,\n    imagePath: 'images/Kingsglaive_Final_Fantasy_XV.jpg',\n    bookmarked: true,\n    genre: 'action',\n  },\n  {\n    id: 2,\n    title: 'Final Fantasy',\n    subtitle: 'Spirits Within',\n    storyline: 'A scientist makes a last stand on Earth with the help of a ragtag team of soldiers against an invasion of alien phantoms.',\n    rating: 4.5,\n    imagePath: 'images/Final_Fantasy_Spirits_Within.jpg',\n    bookmarked: false,\n    genre: 'fantasy',\n  },\n  {\n    id: 3,\n    title: 'Ghost In The Shell',\n    subtitle: 'Ghost In The Shell',\n    storyline: 'A hacker known as the Puppet Master is hunted by a female cyborg cop and her partner. This film is a revised version of Ghost in the Shell (1995).',\n    rating: 5,\n    imagePath: 'images/Ghost_In_The_Shell_2_0.jpg',\n    bookmarked: false,\n    genre: 'comedy',\n  },\n  {\n    id: 4,\n    title: 'Appleseed Alpha',\n    subtitle: 'Appleseed Alpha',\n    storyline: \"A young female soldier Deunan and her cyborg partner Briareos survive through the post World War 3 apocalyptic New York in search of human's future hope, the legendary city of Olympus.\",\n    rating: 3.8,\n    imagePath: 'images/Appleseed_Alpha.jpg',\n    bookmarked: true,\n    genre: 'action',\n  },\n  {\n    id: 5,\n    title: 'Resident Evil',\n    subtitle: 'Vendetta',\n    storyline: 'Chris Redfield enlists the help of Leon S. Kennedy and Rebecca Chambers to stop a death merchant, with a vengeance, from spreading a deadly virus in New York.',\n    rating: 4.2,\n    imagePath: 'images/Resident_Evil_Vendetta.jpg',\n    bookmarked: true,\n    genre: 'fantasy',\n  },\n];\n\nexport default movies;\n","import data from './movieData';\n\nlocalStorage.setItem('movies', JSON.stringify(data));\n\nconst readMovies = () => JSON.parse(localStorage.getItem('movies'));\n\nconst saveMovies = (movies) => localStorage.setItem('movies', JSON.stringify(movies));\n\nexport const getMovies = () => (\n  new Promise((resolve) => {\n    setTimeout(() => {\n      const movies = readMovies();\n      resolve(movies);\n    }, 2000);\n  })\n);\n\nexport const getMovie = (movieId) => {\n  const movie = readMovies().find((mov) => mov.id === parseInt(movieId, 10));\n\n  return new Promise((resolve) => {\n    setTimeout(() => {\n      resolve(movie);\n    }, 2000);\n  });\n};\n\nexport const updateMovie = (updatedMovie) => {\n  const movies = readMovies().map((movie) => {\n    if (movie.id === parseInt(updatedMovie.id, 10)) {\n      return { ...movie, ...updatedMovie };\n    }\n    return movie;\n  });\n  saveMovies(movies);\n\n  return new Promise((resolve) => {\n    setTimeout(() => {\n      resolve('OK');\n    }, 1000);\n  });\n};\n\nexport const createMovie = (movieData) => {\n  let movies = readMovies();\n  const nextId = movies[movies.length - 1].id + 1;\n  const newMovie = { ...movieData, id: nextId };\n  movies = [...movies, newMovie];\n  saveMovies(movies);\n\n  return new Promise((resolve) => {\n    setTimeout(() => {\n      resolve('OK');\n    }, 1000);\n  });\n};\n\nexport const deleteMovie = (movieId) => {\n  let movies = readMovies();\n  movies = movies.filter((movie) => movie.id !== parseInt(movieId, 10));\n  saveMovies(movies);\n\n  return new Promise((resolve) => {\n    setTimeout(() => {\n      resolve({ status: 'OK' });\n    }, 1000);\n  });\n};\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport { ButtonGroup, Card } from 'react-bootstrap';\nimport { Button } from 'react-bootstrap';\nimport * as movieAPI from '../services/movieAPI';\n\nclass MovieDetailsCard extends React.Component {\n  constructor(props) {\n    super(props);\n    this.deleteMovie = this.deleteMovie.bind(this);\n  }\n\n  deleteMovie() {\n    const { id } = this.props;\n    movieAPI.deleteMovie(id);\n  }\n  render() {\n    const { title, storyline, id, imagePath, genre, rating, subtitle} = this.props.movie;\n\n    return (\n      <Card data-testid=\"movie-details\">\n        <Card.Img variant=\"top\" alt={title} src={imagePath} />\n        <Card.Body>\n          <Card.Title>{`Title: ${title}`}</Card.Title>\n          <Card.Text>\n          <p>{`Subtitle: ${subtitle}`}</p>\n          <p>{`Storyline: ${storyline}`}</p>\n          <p>{`Genre: ${genre}`}</p>\n          <p>{`Rating: ${rating}`}</p>\n          </Card.Text>\n        </Card.Body>\n          <ButtonGroup>\n            <Button variant=\"warning\" href={`/movie-library/${id}/edit`}>EDIT</Button>\n            <Button variant=\"warning\" href=\"/movie-library/\">GO BACK</Button>\n            <Button variant=\"warning\" href=\"/movie-library/\" onClick={this.deleteMovie}>DELETE</Button>\n          </ButtonGroup>\n      </Card>\n    );\n  }\n}\n\nMovieDetailsCard.propTypes = {\n  movie: PropTypes.shape({\n    title: PropTypes.string.isRequired,\n    storyline: PropTypes.string.isRequired,\n    id: PropTypes.number.isRequired,\n    imagePath: PropTypes.string.isRequired,\n  }).isRequired,\n};\n\nexport default MovieDetailsCard;\n","import React, { Component } from 'react';\nimport { Redirect } from 'react-router-dom';\nimport PropTypes from 'prop-types';\n\nimport { Loading, MovieForm } from '../components';\nimport * as movieAPI from '../services/movieAPI';\n\nclass EditMovie extends Component {\n  constructor() {\n    super();\n\n    this.state = {\n      movie: {},\n      status: '',\n      shouldRedirect: false,\n    };\n\n    this.handleSubmit = this.handleSubmit.bind(this);\n    this.requestMovie = this.requestMovie.bind(this);\n  }\n\n  componentDidMount() {\n    this.requestMovie();\n  }\n\n  requestMovie() {\n    const { id } = this.props.match.params;\n    this.setState({ status: 'loading' }, async () => {\n      const requestMovie = await movieAPI.getMovie(id);\n      this.setState({\n        status: '',\n        movie: requestMovie,\n      });\n    });\n  }\n\n  handleSubmit(updatedMovie) {\n    this.setState({ status: 'loading' }, async () => {\n      const requestUpdate = await movieAPI.updateMovie(updatedMovie);\n      this.setState({\n        status: requestUpdate,\n        shouldRedirect: true,\n      });\n    });\n  }\n\n  render() {\n    const { status, shouldRedirect, movie } = this.state;\n    if (shouldRedirect) {\n      return <Redirect to=\"/movie-library\" />;\n    }\n\n    if (status === 'loading') {\n      return <Loading />;\n    }\n\n    return (\n      <div data-testid=\"edit-movie\" className=\"edit-container\">\n        <h1>Edit Movie</h1>\n        <MovieForm movie={movie} onSubmit={this.handleSubmit} />\n      </div>\n    );\n  }\n}\n\nEditMovie.propTypes = {\n  match: PropTypes.shape({\n    params: PropTypes.shape({\n      id: PropTypes.string.isRequired,\n    }).isRequired,\n  }).isRequired,\n};\n\nexport default EditMovie;\n","import React, { Component } from 'react';\nimport PropTypes from 'prop-types';\nimport * as movieAPI from '../services/movieAPI';\nimport { Loading, MovieDetailsCard } from '../components';\n\nclass MovieDetails extends Component {\n  constructor() {\n    super();\n\n    this.state = {\n      movie: {},\n      loading: true,\n    };\n\n    this.requestMovie = this.requestMovie.bind(this);\n    this.deleteMovie = this.deleteMovie.bind(this);\n  }\n\n  componentDidMount() {\n    this.requestMovie();\n  }\n\n  requestMovie() {\n    const { id } = this.props.match.params;\n    this.setState({ loading: true }, async () => {\n      const requestMovie = await movieAPI.getMovie(id);\n      this.setState({\n        loading: false,\n        movie: requestMovie,\n      });\n    });\n  }\n\n  deleteMovie() {\n    const { id } = this.props.match.params;\n    movieAPI.deleteMovie(id);\n  }\n\n  render() {\n    const { loading, movie } = this.state;\n\n    return (\n      loading ? <Loading /> : <div className=\"details-container\" data-testid=\"movie-details\">\n        <h1>Movie Details</h1>\n        <MovieDetailsCard movie={movie}/>\n      </div>\n    );\n  }\n}\n\nMovieDetails.propTypes = {\n  match: PropTypes.objectOf(Object).isRequired,\n};\n\nexport default MovieDetails;\n","import React, { Component } from 'react';\nimport { MovieCard, Loading } from '../components';\nimport * as movieAPI from '../services/movieAPI';\nimport { Button } from 'react-bootstrap';\n\nclass MovieList extends Component {\n  constructor() {\n    super();\n\n    this.state = {\n      movies: [],\n      loading: false,\n    };\n  }\n\n  componentDidMount() {\n    this.request();\n  }\n\n  async request() {\n    this.setState(\n      { loading: true },\n      async () => {\n        const requestMovies = await movieAPI.getMovies();\n        this.setState({\n          loading: false,\n          movies: requestMovies,\n        });\n      },\n    );\n  }\n\n  render() {\n    const { movies, loading } = this.state;\n    return (\n      loading ? <Loading /> : <div className=\"movie-list\">\n        <h1>Movie Library</h1>\n        <div className=\"list-container\" >\n          {movies.map((movie) => <MovieCard key={movie.id} movie={movie} />)}\n        </div>\n        <Button href=\"/movie-library/new\" variant=\"warning\" size=\"lg\">ADD A NEW CARD</Button>\n      </div>\n    );\n  }\n}\n\nexport default MovieList;\n","import React, { Component } from 'react';\nimport { Redirect } from 'react-router-dom';\n\nimport MovieForm from '../components/MovieForm';\nimport * as movieAPI from '../services/movieAPI';\n\nclass NewMovie extends Component {\n  constructor(props) {\n    super(props);\n\n    this.handleSubmit = this.handleSubmit.bind(this);\n\n    this.state = {\n      redirect: false,\n    };\n  }\n\n  handleSubmit(newMovie) {\n    movieAPI.createMovie(newMovie)\n      .then(() => {\n        this.setState({\n          redirect: true,\n        });\n      });\n  }\n\n  render() {\n    const { redirect } = this.state;\n    return (\n      redirect ? <Redirect to=\"/\" /> : <div data-testid=\"new-movie\" className=\"edit-container\">\n        <h1>Add Movie</h1>\n        <MovieForm onSubmit={this.handleSubmit} />\n      </div>\n    );\n  }\n}\nexport default NewMovie;\n","import React, { Component } from 'react';\n\nclass NotFound extends Component {\n  render() {\n    return <div data-testid=\"404-error\">Página não encontrada</div>;\n  }\n}\n\nexport default NotFound;\n","import React from 'react';\nimport { BrowserRouter, Route, Switch } from 'react-router-dom';\nimport { EditMovie, MovieDetails, MovieList, NewMovie, NotFound } from './pages';\nimport 'bootstrap/dist/css/bootstrap.min.css';\nimport './styles/App.css';\nimport './styles/MovieList.css';\nimport './styles/Details.css';\nimport './styles/Edit.css';\nimport './styles/Responsive.css';\n\n\nclass App extends React.Component {\n  constructor() {\n    super();\n\n    this.state = {\n      title: '',\n    };\n  }\n  render() {\n    return (\n      <BrowserRouter>\n        <Switch>\n          <Route path=\"/movie-library/:id/edit\" component={EditMovie} />\n          <Route path=\"/movie-library/new\" component={NewMovie} />\n          <Route path=\"/movie-library/:id\" component={MovieDetails} />\n          <Route exact path=\"/movie-library\" component={MovieList} />\n          <Route component={NotFound} />\n        </Switch>\n      </BrowserRouter>\n    );\n  }\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\n\nReactDOM.render(<App />, document.getElementById('root'));\n"],"sourceRoot":""}